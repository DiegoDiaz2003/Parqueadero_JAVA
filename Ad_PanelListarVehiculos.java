/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoparqueadero;

import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.border.Border;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Cesar Augusto Perez Tafur
 */
public class Ad_PanelListarVehiculos extends javax.swing.JPanel {
     private ArrayList<Integer> ids = new ArrayList<>();

   
    /**
     * Creates new form PanelListarVehiculos
     */
    public Ad_PanelListarVehiculos() {
        initComponents();
        TableColumnModel columnModel = tblVehiculos.getColumnModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPlaca = new javax.swing.JTextField();
        txtCelda = new javax.swing.JTextField();
        dcFechaInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVehiculos = new javax.swing.JTable();
        btBuscar = new java.awt.Button();
        btGenerarReporte = new java.awt.Button();
        dcFechaFinal = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        cbParqueadero = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(246, 246, 246));
        setForeground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("SansSerif", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(18, 24, 80));
        jLabel1.setText("Modulo de Consulta de Veh√≠culos del Parqueadero");

        txtPlaca.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txtCelda.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        dcFechaInicial.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(41, 116, 155));
        jLabel2.setText("Placa");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(41, 116, 155));
        jLabel3.setText("Celda");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(41, 116, 155));
        jLabel4.setText("Fecha inicial");

        tblVehiculos.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        tblVehiculos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Placa", "Celda", "Hora Entrada", "Hora Salida", "Estado", "Pago"
            }
        ));
        jScrollPane1.setViewportView(tblVehiculos);
        tblVehiculos.getAccessibleContext().setAccessibleDescription("");

        btBuscar.setBackground(new java.awt.Color(51, 102, 255));
        btBuscar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btBuscar.setLabel("Buscar");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        btGenerarReporte.setActionCommand("Reporte");
        btGenerarReporte.setBackground(new java.awt.Color(255, 255, 51));
        btGenerarReporte.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btGenerarReporte.setForeground(new java.awt.Color(0, 0, 0));
        btGenerarReporte.setLabel("Reporte");
        btGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGenerarReporteActionPerformed(evt);
            }
        });

        dcFechaFinal.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(41, 116, 155));
        jLabel5.setText("Fecha final");

        cbParqueadero.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbParqueadero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(41, 116, 155));
        jLabel7.setText("Parqueadero");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtCelda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(dcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(dcFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(btGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(cbParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcFechaFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPlaca)
                    .addComponent(txtCelda)
                    .addComponent(dcFechaInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    String consulta;
    String tipoVehiculo = "otro", estado = "", FechaInicial = "", FechaFinal ="";
    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
    try {
            
            DefaultTableModel modelo = (DefaultTableModel) tblVehiculos.getModel();
            modelo.setRowCount(0);
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
            Statement stat = con.createStatement();
            
        if (dcFechaInicial.getDate() != null) {
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date = dcFechaInicial.getDate();
            FechaInicial = dateFormat.format(date);
        }
        
        if (dcFechaFinal.getDate() != null) {
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date = dcFechaFinal.getDate();
            FechaFinal = dateFormat.format(date);
            
        }
            String consulta1 = "SELECT "+
                                        "P.Nombre_parqueadero as 'Parqueadero', "+
                                        "C.Id_celda as 'Id_celda' "+
                                    "FROM [dbo].[Parqueadero] P "+
                                    "JOIN [dbo].[Celdas] C "+
                                    "ON P.Id_parqueadero = C.Id_parqueadero WHERE P.Nombre_parqueadero LIKE'%" + cbParqueadero.getSelectedItem()+ "%';";

            ResultSet rs = stat.executeQuery(consulta1);
            System.out.println(consulta1);
            
            if (rs.next()) {

                do {
                    String consulta = "SELECT "+
                                        "V.Placa as 'Placa', "+
                                        "C.Numero_celda as 'Celda', "+
                                        "V.Hora_entrada as 'Hora_entrada', "+
                                        "V.Hora_salida as 'Hora_salida', "+
                                        "C.Id_celda as 'Id_celda' ,"+
                                        "V.Valor_total as 'Valor_total', "+
                                        "V.Id_vehiculo as 'Id_vehiculo' "+
                                    "FROM [dbo].[Vehiculo] V "+
                                    "JOIN [dbo].[Celdas] C "+
                                    "ON C.Id_celda = V.Id_celda WHERE C.Id_celda=" + rs.getInt("Id_celda") + " AND Placa LIKE '%" + txtPlaca.getText() + "%' AND C.Numero_celda LIKE '%" + txtCelda.getText() + "%'" + " AND Hora_entrada BETWEEN '" + FechaInicial + "' AND '" + FechaFinal + "';" ;
                 
                    Statement stat_1 = con.createStatement();
                    System.out.println(consulta);
                    ResultSet rs1 = stat_1.executeQuery(consulta);

                    // nombre,apellido,cedula,perfil,correo
                    while (rs1.next()) {

                        String disposicion = "";
                        String horasalida = rs1.getString("Hora_salida");
                        String pago = rs1.getString("Valor_total");
                        if (horasalida == null) {
                            horasalida = "No ha salido";
                            pago = "0";
                            disposicion = "En el parqueadero";
                        } else {
                            disposicion = "Fuera del parqueadero";
                            horasalida = rs1.getString("Hora_salida").substring(10).substring(0,6);
                            pago = rs1.getString("Valor_total");
                        }

                        String[] fila = {rs1.getString("Id_vehiculo"), rs1.getString("Placa"), rs1.getString("Celda"),rs1.getString("Hora_entrada").substring(10).substring(0, 6), horasalida, disposicion, "$" + pago};
                        modelo.addRow(fila);

                    } 

                    } while (rs.next());

            }
            
            if ( modelo.getRowCount() == 0 ) {
                JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "B√∫squeda vacia", JOptionPane.INFORMATION_MESSAGE);
            }
         
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btBuscarActionPerformed

    private void btGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGenerarReporteActionPerformed
    try {
            
        String dest = new File (".").getAbsolutePath ()+"/sample.pdf"; 
        try {
            
            PdfWriter writer = new PdfWriter(dest);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc, PageSize.A5);
            pdfDoc.addNewPage(); 

            Paragraph para = new Paragraph ("Reporte del Parqueadero"); 

            para.setBorder(Border.NO_BORDER);
            para.setBold();

            Paragraph para1 = new Paragraph ("Hora inicial del reporte: "+ FechaInicial); 
            Paragraph para2 = new Paragraph ("Hora final del reporte: "+ FechaFinal); 
            Paragraph para3 = new Paragraph ("Celda: "+txtCelda.getText()); 
            Paragraph para4 = new Paragraph ("Placa: "+txtPlaca.getText()); 

            document.add(para); 
            document.add(para1);
            document.add(para2); 
            document.add(para3); 
            document.add(para4);
            
            float[] columns = {50F,150F,150F,150F,150F,150F,150F};
            Table table = new Table(columns);    
            
            table.addCell("Id");
            table.addCell("Placa");
            table.addCell("Celda");
            table.addCell("Hora entrada");
            table.addCell("Hora salida");
            table.addCell("Estado");
            table.addCell("Pago");

            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
            Statement stat = con.createStatement();

            if (dcFechaInicial.getDate() != null) {
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date date = dcFechaInicial.getDate();
                FechaInicial = dateFormat.format(date);
            }

            if (dcFechaFinal.getDate() != null) {
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date date = dcFechaFinal.getDate();
                FechaFinal = dateFormat.format(date);

            }
            
            String consulta1 = "SELECT "+
                                        "P.Nombre_parqueadero as 'Parqueadero', "+
                                        "C.Id_celda as 'Id_celda' "+
                                    "FROM [dbo].[Parqueadero] P "+
                                    "JOIN [dbo].[Celdas] C "+
                                    "ON P.Id_parqueadero = C.Id_parqueadero WHERE P.Nombre_parqueadero LIKE'%" + cbParqueadero.getSelectedItem()+ "%';";

            ResultSet rs = stat.executeQuery(consulta1);
            System.out.println(consulta1);
            
            if (rs.next()) {
                
                do {
                    String consulta = "SELECT "+
                                        "V.Placa as 'Placa', "+
                                        "C.Numero_celda as 'Celda', "+
                                        "V.Hora_entrada as 'Hora_entrada', "+
                                        "V.Hora_salida as 'Hora_salida', "+
                                        "C.Id_celda as 'Id_celda' ,"+
                                        "V.Valor_total as 'Valor_total', "+
                                        "V.Id_vehiculo as 'Id_vehiculo' "+
                                    "FROM [dbo].[Vehiculo] V "+
                                    "JOIN [dbo].[Celdas] C "+
                                    "ON C.Id_celda = V.Id_celda WHERE C.Id_celda=" + rs.getInt("Id_celda") + " AND Placa LIKE '%" + txtPlaca.getText() + "%' AND C.Numero_celda LIKE '%" + txtCelda.getText() + "%'" + " AND Hora_entrada BETWEEN '" + FechaInicial + "' AND '" + FechaFinal + "';" ;
                 
                    Statement stat_1 = con.createStatement();
                    System.out.println(consulta);
                    ResultSet rs1 = stat_1.executeQuery(consulta);

                    // nombre,apellido,cedula,perfil,correo
                    while (rs1.next()) {

                        String disposicion = "";
                        String horasalida = rs1.getString("Hora_salida");
                        String pago = rs1.getString("Valor_total");
                        if (horasalida == null) {
                            horasalida = "No ha salido";
                            pago = "0";
                            disposicion = "En el parqueadero";
                        } else {
                            disposicion = "Fuera del parqueadero";
                            horasalida = rs1.getString("Hora_salida").substring(10).substring(0,6);
                            pago = rs1.getString("Valor_total");
                        }
                                                
                        table.addCell(rs1.getString("Id_vehiculo"));
                        table.addCell(rs1.getString("Placa"));
                        table.addCell(rs1.getString("Celda"));
                        table.addCell(rs1.getString("Hora_entrada").substring(10).substring(0, 6));
                        table.addCell(horasalida);
                        table.addCell(disposicion);
                        table.addCell("$" + pago);
                        

                    } 

                    } while (rs.next());

            }
            
            if ( table.getNumberOfRows() == 1 ) {
                JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "B√∫squeda vacia", JOptionPane.INFORMATION_MESSAGE);
            }
            
            document.add(table);
            document.close();
            System.out.println("PDF Created");  
            
        try {

            if ((new File(new File (".").getAbsolutePath ()+"/sample.pdf")).exists()) {

                    Process p = Runtime
                       .getRuntime()
                       .exec("rundll32 url.dll,FileProtocolHandler "+ new File (".").getAbsolutePath ()+"/sample.pdf");
                    p.waitFor();

            } else {

                    System.out.println("File is not exists");

            }

            System.out.println("Done");

        } catch (Exception ex) {
              ex.printStackTrace();
        }

        } catch (FileNotFoundException ex) {
        Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }

    } catch (ClassNotFoundException ex) {
        Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
    }

    }//GEN-LAST:event_btGenerarReporteActionPerformed
    
    @Override
    public void setVisible( boolean value ) {
        super.setVisible(value);
        cbParqueadero.removeAllItems();
        if (value) {
            try {
            
                    DefaultTableModel modelo = (DefaultTableModel) tblVehiculos.getModel();
                    modelo.setRowCount(0);
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
                    Statement stat = con.createStatement();
                    
                    String consulta1 = "SELECT "+
                                                "P.Nombre_parqueadero as 'Parqueadero', "+
                                                "C.Id_celda as 'Id_celda' "+
                                            "FROM [dbo].[Parqueadero] P "+
                                            "JOIN [dbo].[Celdas] C "+
                                            "ON P.Id_parqueadero = C.Id_parqueadero;";

                    ResultSet rs = stat.executeQuery(consulta1);
                    System.out.println(consulta1);

                    if (rs.next()) {

                        do {
                            String consulta = "SELECT "+
                                                "V.Placa as 'Placa', "+
                                                "C.Numero_celda as 'Celda', "+
                                                "V.Hora_entrada as 'Hora_entrada', "+
                                                "V.Hora_salida as 'Hora_salida', "+
                                                "C.Id_celda as 'Id_celda' ,"+
                                                "V.Valor_total as 'Valor_total', "+
                                                "V.Id_vehiculo as 'Id_vehiculo' "+
                                            "FROM [dbo].[Vehiculo] V "+
                                            "JOIN [dbo].[Celdas] C "+
                                            "ON C.Id_celda = V.Id_celda;" ;

                            Statement stat_1 = con.createStatement();
                            System.out.println(consulta);
                            ResultSet rs1 = stat_1.executeQuery(consulta);

                            // nombre,apellido,cedula,perfil,correo
                            while (rs1.next()) {

                                String disposicion = "";
                                String horasalida = rs1.getString("Hora_salida");
                                String pago = rs1.getString("Valor_total");
                                if (horasalida == null) {
                                    horasalida = "No ha salido";
                                    pago = "0";
                                    disposicion = "En el parqueadero";
                                } else {
                                    disposicion = "Fuera del parqueadero";
                                    horasalida = rs1.getString("Hora_salida").substring(10).substring(0,6);
                                    pago = rs1.getString("Valor_total");
                                }

                                String[] fila = {rs1.getString("Id_vehiculo"), rs1.getString("Placa"), rs1.getString("Celda"),rs1.getString("Hora_entrada").substring(10).substring(0, 6), horasalida, disposicion, "$" + pago};
                                modelo.addRow(fila);

                            } 

                            } while (rs.next());

                    }

                    if ( modelo.getRowCount() == 0 ) {
                        JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "B√∫squeda vacia", JOptionPane.INFORMATION_MESSAGE);
                    }


                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            try {
            // TODO add your handling code here:
            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
                Statement stat = con.createStatement();
                
                String sql_parqueaderos = "SELECT Id_parqueadero, Nombre_parqueadero FROM [dbo].[Parqueadero];";
                ResultSet rs_parqueaderos = stat.executeQuery(sql_parqueaderos);

                System.out.println(sql_parqueaderos);

                while ( rs_parqueaderos.next() ) {
                    int id_parqueadero = rs_parqueaderos.getInt("Id_parqueadero");
                    String nombre_parqueadero = rs_parqueaderos.getString("Nombre_parqueadero");

                    cbParqueadero.addItem(nombre_parqueadero);

                    ids.add(id_parqueadero);
                }
                
                stat.close();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelEditarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelEditarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            txtPlaca.setText("");
            txtCelda.setText("");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btBuscar;
    private java.awt.Button btGenerarReporte;
    private javax.swing.JComboBox<String> cbParqueadero;
    private com.toedter.calendar.JDateChooser dcFechaFinal;
    private com.toedter.calendar.JDateChooser dcFechaInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblVehiculos;
    private javax.swing.JTextField txtCelda;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}
