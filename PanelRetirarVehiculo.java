/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoparqueadero;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Principal
 */
public class PanelRetirarVehiculo extends javax.swing.JPanel {

    
    private int idParqueadero;
    
    /**
     * Creates new form PanelRetirarVehiculo
     */
    public PanelRetirarVehiculo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    String Hora_salida = "";
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPlaca = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btCancelarSesion = new java.awt.Button();
        btRetirar = new java.awt.Button();

        setBackground(new java.awt.Color(246, 246, 246));
        setPreferredSize(new java.awt.Dimension(672, 455));
        setRequestFocusEnabled(false);

        txtPlaca.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(41, 116, 155));
        jLabel2.setText("Placa");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("SansSerif", 3, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(18, 24, 80));
        jLabel4.setText("Modulo de Retiro de Motocicletas del parqueadero");

        btCancelarSesion.setBackground(new java.awt.Color(255, 0, 0));
        btCancelarSesion.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btCancelarSesion.setForeground(new java.awt.Color(255, 255, 255));
        btCancelarSesion.setLabel("Cancelar sesion");
        btCancelarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarSesionActionPerformed(evt);
            }
        });

        btRetirar.setBackground(new java.awt.Color(51, 102, 255));
        btRetirar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btRetirar.setForeground(new java.awt.Color(255, 255, 255));
        btRetirar.setLabel("Retirar");
        btRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetirarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btRetirar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(btCancelarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 47, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel2)))
                .addGap(250, 250, 250))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124)
                        .addComponent(btCancelarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btRetirar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btCancelarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarSesionActionPerformed
        int input = JOptionPane.showConfirmDialog(null, "¿Desea cancelar la sesión de parqueo? Esto dejara libre la celda, pero el valor del cobro se registrará como nulo", "Confirmar cancelación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if ( input == 0 ) {
            try {
            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
                Statement stat = con.createStatement();

                String placa = txtPlaca.getText();

                String sql = "SELECT "+
                                            "V.Placa as 'Placa', "+
                                            "V.Id_vehiculo as 'Id_vehiculo', "+
                                            "V.Hora_entrada as 'Hora_entrada', "+
                                            "V.Hora_salida as 'Hora_salida', "+
                                            "V.Id_celda as 'Id_celda', "+
                                            "C.Id_parqueadero as 'Id_parqueadero' "+
                                            "FROM [dbo].[Vehiculo] V "+
                                            "JOIN [dbo].[Celdas] C "+
                                            "ON V.Id_celda = C.Id_celda " +
                                            "WHERE V.Placa LIKE '%" + placa + "%' AND V.Hora_salida IS NULL AND C.Id_parqueadero="+ idParqueadero +";";

                System.out.println(sql);
                ResultSet rs = stat.executeQuery(sql);

                if (rs.next()) {

                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    Calendar cal = Calendar.getInstance();
                    Date date_salida = cal.getTime();
                    Hora_salida = dateFormat.format(date_salida);

                    String Hora_entrada = rs.getString("Hora_entrada");
                    int Id_vehiculo = rs.getInt("Id_vehiculo");
                    int Id_parqueadero = rs.getInt("Id_parqueadero");
                    int Id_celda = rs.getInt("Id_celda");

                    System.out.println("Hora de entrada: " + Hora_entrada);
                    System.out.println("Parqueadero: " + Id_parqueadero);
                    System.out.println("Vehículo: " + Id_vehiculo);

                    String sql_celda = "UPDATE [dbo].[Celdas] SET Disposicion_celda='Disponible' WHERE Id_celda = " + Id_celda + ";";
                    System.out.println(sql_celda);
                    PreparedStatement stat_celda = con.prepareStatement(sql_celda);
                    stat_celda.executeUpdate();
                    stat_celda.close();

                    String sql_upd_parqueadero = "UPDATE [dbo].[Parqueadero] SET Total_celdas_disponibles=Total_celdas_disponibles + 1 , Total_celdas_ocupadas=Total_celdas_ocupadas - 1 WHERE Id_parqueadero = " + Id_parqueadero + ";";
                    System.out.println(sql_upd_parqueadero);
                    PreparedStatement stat_upd_parqueadero = con.prepareStatement(sql_upd_parqueadero);
                    stat_upd_parqueadero.executeUpdate();
                    stat_upd_parqueadero.close();

                    String sql_vehiculo = "UPDATE [dbo].[Vehiculo] SET Hora_salida='"+Hora_salida+"', Valor_total=0 WHERE Id_vehiculo = " + Id_vehiculo + ";";
                    System.out.println(sql_vehiculo);
                    PreparedStatement stat_vehiculo = con.prepareStatement(sql_vehiculo);
                    stat_vehiculo.executeUpdate();
                    stat_vehiculo.close();

                    JOptionPane.showMessageDialog(null, "Sesión cancelada con exito", "Sesión cancelada", JOptionPane.ERROR_MESSAGE);

                } else {
                    JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "Búsqueda vacia", JOptionPane.INFORMATION_MESSAGE);
                }

                stat.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelConsultarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelConsultarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
    }//GEN-LAST:event_btCancelarSesionActionPerformed

    private void btRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetirarActionPerformed
        try {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
            Statement stat = con.createStatement();
            
            String placa = txtPlaca.getText();
            
            String sql = "SELECT "+
                                        "V.Placa as 'Placa', "+
                                        "V.Id_vehiculo as 'Id_vehiculo', "+
                                        "V.Hora_entrada as 'Hora_entrada', "+
                                        "V.Hora_salida as 'Hora_salida', "+
                                        "V.Id_celda as 'Id_celda', "+
                                        "C.Id_parqueadero as 'Id_parqueadero' "+
                                        "FROM [dbo].[Vehiculo] V "+
                                        "JOIN [dbo].[Celdas] C "+
                                        "ON V.Id_celda = C.Id_celda " +
                                        "WHERE V.Placa LIKE '%" + placa + "%' AND V.Hora_salida IS NULL AND C.Id_parqueadero="+ idParqueadero +";";
            
            System.out.println(sql);
            ResultSet rs = stat.executeQuery(sql);
            
            if (rs.next()) {
                
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                Date date_salida = cal.getTime();
                Hora_salida = dateFormat.format(date_salida);
                
                String Hora_entrada = rs.getString("Hora_entrada");
                int Id_vehiculo = rs.getInt("Id_vehiculo");
                int Id_parqueadero = rs.getInt("Id_parqueadero");
                int Id_celda = rs.getInt("Id_celda");
                
                Date date_entrada = dateFormat.parse(Hora_entrada);
                
                System.out.println("Hora de entrada: " + Hora_entrada);
                System.out.println("Parqueadero: " + Id_parqueadero);
                System.out.println("Vehículo: " + Id_vehiculo);
                
                
                String sql_sel_parqueadero = "SELECT Valor_fraccion, Valor_hora, Valor_dia, Valor_mes FROM [dbo].[Parqueadero] WHERE Id_parqueadero=" + Id_parqueadero + ";";
                System.out.println(sql_sel_parqueadero);
                Statement stat_sel_parqueadero = con.createStatement();
                ResultSet rs_parqueadero = stat_sel_parqueadero.executeQuery(sql_sel_parqueadero);
                
                rs_parqueadero.next();
                
                int Valor_fraccion =  rs_parqueadero.getInt("Valor_fraccion");
                int Valor_hora =  rs_parqueadero.getInt("Valor_hora");
                int Valor_dia =  rs_parqueadero.getInt("Valor_dia");
                int Valor_mes =  rs_parqueadero.getInt("Valor_mes");
                
                long elapsedms = date_salida.getTime() - date_entrada.getTime();
                long diff = TimeUnit.MINUTES.convert(elapsedms, TimeUnit.MILLISECONDS);
                System.out.println(diff);
                
                double fraccion_pura = diff/( (double) 15 );
                
                long fracciones = (long) Math.ceil(fraccion_pura) ;
                long horas = fracciones/( (long) 4 );
                
                fracciones = fracciones - (horas * 4);
                
                long dias = horas/( (long) 24 );
                
                horas = horas - (dias * 24);
                
                long meses = dias/( (long) 30 );
                
                dias = dias - (meses * 30);
                
                long Valor_calculado = fracciones * Valor_fraccion + horas * Valor_hora + dias * Valor_dia + meses * Valor_mes;
                
                System.out.println("Fracciones: "+ fracciones);
                System.out.println("Horas: "+horas);
                System.out.println("Dias: "+ dias);
                System.out.println("Meses: "+meses);
                System.out.println(Valor_calculado);
                
                stat_sel_parqueadero.close();
                
                String sql_celda = "UPDATE [dbo].[Celdas] SET Disposicion_celda='Disponible' WHERE Id_celda = " + Id_celda + ";";
                System.out.println(sql_celda);
                PreparedStatement stat_celda = con.prepareStatement(sql_celda);
                stat_celda.executeUpdate();
                stat_celda.close();
                
                String sql_upd_parqueadero = "UPDATE [dbo].[Parqueadero] SET Total_celdas_disponibles=Total_celdas_disponibles + 1 , Total_celdas_ocupadas=Total_celdas_ocupadas - 1 WHERE Id_parqueadero = " + Id_parqueadero + ";";
                System.out.println(sql_upd_parqueadero);
                PreparedStatement stat_upd_parqueadero = con.prepareStatement(sql_upd_parqueadero);
                stat_upd_parqueadero.executeUpdate();
                stat_upd_parqueadero.close();
                
                String sql_vehiculo = "UPDATE [dbo].[Vehiculo] SET Hora_salida='"+Hora_salida+"', Valor_total="+Valor_calculado+" WHERE Id_vehiculo = " + Id_vehiculo + ";";
                System.out.println(sql_vehiculo);
                PreparedStatement stat_vehiculo = con.prepareStatement(sql_vehiculo);
                stat_vehiculo.executeUpdate();
                stat_vehiculo.close();
                
                JOptionPane.showMessageDialog(null, "Valor a pagar:  $"+Valor_calculado, "Cobro", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "Búsqueda vacia", JOptionPane.INFORMATION_MESSAGE);
            }
            
            stat.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelConsultarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PanelConsultarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(PanelRetirarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btRetirarActionPerformed
    
    public void setIdParqueadero( int id ) {
        idParqueadero = id;
        System.out.println(idParqueadero);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btCancelarSesion;
    private java.awt.Button btRetirar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}
