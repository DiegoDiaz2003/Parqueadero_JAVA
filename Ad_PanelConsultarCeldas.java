/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package proyectoparqueadero;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.SwingUtilities;

/**
 *
 * @author SIMON
 */
public class Ad_PanelConsultarCeldas extends javax.swing.JPanel {

    
    private int idParqueadero;
    private ArrayList<Integer> ids = new ArrayList<>();
    /**
     * Creates new form PanelConsultarCeldas
     */
    public Ad_PanelConsultarCeldas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btConsultarCelda = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCeldas = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cbParqueadero = new javax.swing.JComboBox<>();
        rbCeldaOcupada = new javax.swing.JRadioButton();
        rbCeldaDisponible = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        txtNumCelda = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btEditar = new java.awt.Button();

        setBackground(new java.awt.Color(246, 246, 246));

        btConsultarCelda.setBackground(new java.awt.Color(51, 102, 255));
        btConsultarCelda.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btConsultarCelda.setForeground(new java.awt.Color(255, 255, 255));
        btConsultarCelda.setLabel("Consultar");
        btConsultarCelda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarCeldaActionPerformed(evt);
            }
        });

        tblCeldas.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblCeldas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número", "Ubicacion", "Disposicion", "Parqueadero"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCeldas);

        jLabel4.setFont(new java.awt.Font("SansSerif", 3, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(18, 24, 80));
        jLabel4.setText("Modulo de Consulta de Celdas");

        jLabel9.setBackground(new java.awt.Color(255, 255, 102));
        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(41, 116, 155));
        jLabel9.setText("Parqueadero");

        cbParqueadero.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbParqueadero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Centro", "Barbosa", "Laureles" }));
        cbParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbParqueaderoActionPerformed(evt);
            }
        });

        rbCeldaOcupada.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        rbCeldaOcupada.setForeground(new java.awt.Color(63, 63, 63));
        rbCeldaOcupada.setText("Ocupada");
        rbCeldaOcupada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCeldaOcupadaActionPerformed(evt);
            }
        });

        rbCeldaDisponible.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        rbCeldaDisponible.setForeground(new java.awt.Color(63, 63, 63));
        rbCeldaDisponible.setText("Disponible");
        rbCeldaDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCeldaDisponibleActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(41, 116, 155));
        jLabel6.setText("Disposición");

        txtNumCelda.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(41, 116, 155));
        jLabel5.setText("Número");

        btEditar.setActionCommand("Editar");
        btEditar.setBackground(new java.awt.Color(255, 0, 0));
        btEditar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btEditar.setForeground(new java.awt.Color(255, 255, 255));
        btEditar.setLabel("Editar");
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtNumCelda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbCeldaOcupada)
                                .addGap(9, 9, 9)
                                .addComponent(rbCeldaDisponible))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jLabel6)))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel9)
                            .addComponent(cbParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(86, 86, 86))))
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btConsultarCelda, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(btEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(rbCeldaOcupada)
                            .addComponent(rbCeldaDisponible)
                            .addComponent(cbParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumCelda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btConsultarCelda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbParqueaderoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbParqueaderoActionPerformed

    private void rbCeldaDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCeldaDisponibleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbCeldaDisponibleActionPerformed

    private void rbCeldaOcupadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCeldaOcupadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbCeldaOcupadaActionPerformed

    private void btConsultarCeldaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarCeldaActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblCeldas.getModel();
        modelo.setRowCount(0);

        idParqueadero = ids.get(cbParqueadero.getSelectedIndex());
        String parqSele= String.valueOf( cbParqueadero.getSelectedItem() );
        String estado ="";
        
        if (rbCeldaOcupada.isSelected()){
            estado = "Ocupada";
            
            if (rbCeldaDisponible.isSelected()){
                estado = "";
            }
        } else if (rbCeldaDisponible.isSelected()){
            estado = "Disponible";
        }
        
        String numCelda = txtNumCelda.getText();
         
        System.out.println("par = "+parqSele+" estado = "+estado+" numCelda = "+numCelda);
         
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
            
            Statement stat = con.createStatement();
            
            String consulta = "";
            
            if(estado.equals("")){
                consulta = "SELECT * FROM [dbo].[Celdas] WHERE Numero_celda LIKE'%" + numCelda + "%' AND Id_parqueadero = " +idParqueadero + ";";
            }else{
                consulta = "SELECT * FROM  [dbo].[Celdas] WHERE Numero_celda LIKE'%" + numCelda + "%' AND Disposicion_celda = '" + estado + "' AND Id_parqueadero = " +idParqueadero + ";";
            }
            
            System.out.println(consulta);
            ResultSet rs = stat.executeQuery(consulta);
            
            if (rs.next()) {
                do {
                    String nomParqueadero = "";
                    String numero = rs.getString("Numero_celda");
                    String ubicacion = rs.getString("Ubicacion_celda");
                    String disposicion = rs.getString("Disposicion_celda");

                    nomParqueadero = parqSele;
                    
                    String[] fila = {(numero),(ubicacion),(disposicion),(nomParqueadero)};
                    modelo.addRow(fila);
         
                } while (rs.next());
            }else {
                JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "Búsqueda vacia", JOptionPane.INFORMATION_MESSAGE);
            }
            
            stat.close();
        } catch (SQLException ex) {
            Logger.getLogger(Ad_PanelConsultarCeldas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Ad_PanelConsultarCeldas.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }//GEN-LAST:event_btConsultarCeldaActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        try {
            // TODO add your handling code here:

            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
            Statement stat = con.createStatement();

            String sql = "SELECT " +
                        "C.Id_celda as 'Id_celda', " +
                        "P.Nombre_parqueadero as 'Nombre_parqueadero', " +
                        "C.Numero_celda as 'Numero_celda', " +
                        "C.Ubicacion_celda as 'Ubicacion_celda', " +
                        "C.Disposicion_celda as 'Disposicion_celda' " +
                        "FROM [dbo].[Celdas] C JOIN [dbo].[Parqueadero] P ON P.Id_parqueadero = C.Id_parqueadero;";
            
            ResultSet rs = stat.executeQuery(sql);

            System.out.println(sql);

            ArrayList<Integer> id_celdas = new ArrayList<>();
            ArrayList<String> etiquetas = new ArrayList<>();

            rs.next();

            do {
                int id_celda = rs.getInt("Id_celda");
                String numero = rs.getString("Numero_celda");
                String nombre = rs.getString("Nombre_parqueadero");

                id_celdas.add(id_celda);
                etiquetas.add(numero + " - " + nombre);

            } while (rs.next());

            String[] etiquetasArr = new String[etiquetas.size()];
            etiquetasArr = etiquetas.toArray(etiquetasArr);

            Object seleccion = JOptionPane.showInputDialog(
                null,
                "Seleccione una celda",
                "Celda a editar",
                JOptionPane.QUESTION_MESSAGE,
                null,  // null para icono defecto
                etiquetasArr,
                etiquetasArr[0]);

            String strOpcion = String.valueOf(seleccion);

            System.out.println(strOpcion);
            
            int indexSelected = etiquetas.indexOf(strOpcion);
            int celda_buscada = id_celdas.get(indexSelected);
            
            System.out.println(celda_buscada);

            Principal_Admin objFrame = (Principal_Admin) SwingUtilities.getAncestorOfClass(Principal_Admin.class, this);
            objFrame.changeToEditCells(celda_buscada);

            
            stat.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelConsultarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PanelConsultarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btEditarActionPerformed

    
    @Override
    public void setVisible( boolean value ) {
        super.setVisible(value);
        
        cbParqueadero.removeAllItems();
        
        if ( value ) {
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
                Statement stat = con.createStatement();

                String sql = "SELECT Id_parqueadero, Nombre_parqueadero FROM [dbo].[Parqueadero];";
                ResultSet rs = stat.executeQuery(sql);

                System.out.println(sql);

                while ( rs.next() ) {
                    int id_parqueadero = rs.getInt("Id_parqueadero");
                    String nombre_parqueadero = rs.getString("Nombre_parqueadero");

                    cbParqueadero.addItem(nombre_parqueadero);

                    ids.add(id_parqueadero);
                }
                
                cbParqueadero.setSelectedIndex(0);
                
                DefaultTableModel modelo = (DefaultTableModel) tblCeldas.getModel();
                modelo.setRowCount(0);
                
                Statement stat2 = con.createStatement();

                String consulta = "SELECT " +
                        "P.Nombre_parqueadero as 'Nombre_parqueadero', " +
                        "C.Numero_celda as 'Numero_celda', " +
                        "C.Ubicacion_celda as 'Ubicacion_celda', " +
                        "C.Disposicion_celda as 'Disposicion_celda' " +
                        "FROM [dbo].[Celdas] C JOIN [dbo].[Parqueadero] P ON P.Id_parqueadero = C.Id_parqueadero;";
                
                System.out.println(consulta);
                ResultSet rs2 = stat2.executeQuery(consulta);

                if (rs2.next()) {
                    do {
                        String nomParqueadero = rs2.getString("Nombre_parqueadero");
                        String numero = rs2.getString("Numero_celda");
                        String ubicacion = rs2.getString("Ubicacion_celda");
                        String disposicion = rs2.getString("Disposicion_celda");

                        String[] fila = {(numero),(ubicacion),(disposicion),(nomParqueadero)};
                        
                        System.out.println(Arrays.toString(fila));
                        
                        modelo.addRow(fila);

                    } while (rs2.next());
                }else {
                    JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "Búsqueda vacia", JOptionPane.INFORMATION_MESSAGE);
                }
                
                stat2.close();
                stat.close();
                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelRegistroUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelRegistroUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else {
            txtNumCelda.setText("");
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btConsultarCelda;
    private java.awt.Button btEditar;
    private javax.swing.JComboBox<String> cbParqueadero;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbCeldaDisponible;
    private javax.swing.JRadioButton rbCeldaOcupada;
    private javax.swing.JTable tblCeldas;
    private javax.swing.JTextField txtNumCelda;
    // End of variables declaration//GEN-END:variables
}
