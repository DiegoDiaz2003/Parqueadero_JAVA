/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoparqueadero;


import com.itextpdf.io.font.FontConstants;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import static com.itextpdf.kernel.pdf.PdfName.Font;
import static com.itextpdf.kernel.pdf.PdfName.FontFamily;


import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.border.Border;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import com.itextpdf.io.font.FontConstants;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import static com.itextpdf.kernel.pdf.PdfName.Font;
import static com.itextpdf.kernel.pdf.PdfName.FontFamily;


import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.border.Border;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;



/*
 *
 * @author Principal
 */
public class PanelRegistrarVehiculo extends javax.swing.JPanel {

    private int idParqueadero;
    private ArrayList<Integer> ids = new ArrayList<>();
    
    /**
     * Creates new form PanelIngresarVehiculo
     */
    public PanelRegistrarVehiculo() {
        initComponents();

        

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    String Hora_entrada = "";
    int id;
     public static final String DEST = "proyectoparqueadero/hello_world.pdf";
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPlaca = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbCeldas = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btRegistrar = new java.awt.Button();

        setBackground(new java.awt.Color(246, 246, 246));
        setForeground(new java.awt.Color(18, 24, 80));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("SansSerif", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(18, 24, 80));
        jLabel1.setText("Modulo de Ingreso de motocicletas al parqueadero");

        txtPlaca.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtPlaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlacaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(41, 116, 155));
        jLabel2.setText("Ingresar Placa");

        cbCeldas.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbCeldas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celdas", "Celda 1a", "Celda 2a", "Celda 3a" }));
        cbCeldas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCeldasActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(41, 116, 155));
        jLabel3.setText("Ingresar Celda");

        btRegistrar.setBackground(new java.awt.Color(51, 102, 255));
        btRegistrar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        btRegistrar.setLabel("Registrar");
        btRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 44, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(btRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(cbCeldas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCeldas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(btRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents
  
    private void cbCeldasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCeldasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCeldasActionPerformed

    private void txtPlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlacaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPlacaActionPerformed

    private void btRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegistrarActionPerformed

        int indexSelected = cbCeldas.getSelectedIndex();
        String itemSelected = String.valueOf( cbCeldas.getSelectedItem() );
        id = ids.get(indexSelected);
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
            
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Calendar cal = Calendar.getInstance();
            Date date = cal.getTime();
            Hora_entrada = dateFormat.format(date);
            
            System.out.print(dateFormat.format(date));
            
            Statement stat = con.createStatement();
            String sql = "INSERT INTO [dbo].[Vehiculo] (Placa,Hora_entrada,Id_celda) VALUES ('" + txtPlaca.getText() + "','" + Hora_entrada + "', " + String.valueOf(id) + ");";
            
            String sql_celda = "UPDATE [dbo].[Celdas] SET Disposicion_celda='Ocupada' WHERE Id_celda = " + String.valueOf(id) + ";";
            System.out.println(sql_celda);
            PreparedStatement stat_celda = con.prepareStatement(sql_celda);
            stat_celda.executeUpdate();
            stat_celda.close();

            String sql_upd_parqueadero = "UPDATE [dbo].[Parqueadero] SET Total_celdas_disponibles=Total_celdas_disponibles - 1 , Total_celdas_ocupadas=Total_celdas_ocupadas + 1 WHERE Id_parqueadero = " + idParqueadero + ";";
            System.out.println(sql_upd_parqueadero);
            PreparedStatement stat_upd_parqueadero = con.prepareStatement(sql_upd_parqueadero);
            stat_upd_parqueadero.executeUpdate();
            stat_upd_parqueadero.close();
            
            stat.executeUpdate(sql);
            
            stat.close();
            
            JOptionPane.showMessageDialog(null, "El vehiculo se registro exitosamente");

        } catch (SQLException ex) {
            Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }

        
           String dest = new File (".").getAbsolutePath ()+"/sample.pdf"; 
        try {
            
            PdfWriter writer = new PdfWriter(dest);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc, PageSize.A5);
            pdfDoc.addNewPage(); 
           
            Paragraph para = new Paragraph ("Recibo Parqueadero"); 
            
            para.setBorder(Border.NO_BORDER);
            para.setBold();
             
            Paragraph para1 = new Paragraph ("Placa vehiculo: "+txtPlaca.getText()); 
            Paragraph para2 = new Paragraph ("Hora de ingreso: "+Hora_entrada); 
            Paragraph para3 = new Paragraph ("Celda: "+itemSelected); 
            
            document.add(para); 
            document.add(para1);
            document.add(para2); 
            document.add(para3); 
            document.close();
             System.out.println("PDF Created");  
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {

		if ((new File(new File (".").getAbsolutePath ()+"/sample.pdf")).exists()) {

			Process p = Runtime
			   .getRuntime()
			   .exec("rundll32 url.dll,FileProtocolHandler "+ new File (".").getAbsolutePath ()+"/sample.pdf");
			p.waitFor();
				
		} else {

			System.out.println("File is not exists");

		}

		System.out.println("Done");

  	  } catch (Exception ex) {
		ex.printStackTrace();
	  }
    }//GEN-LAST:event_btRegistrarActionPerformed

    
    @Override
    public void setVisible( boolean value ) {
        super.setVisible(value);
        
        cbCeldas.removeAllItems();
        
        if (value) {
            try {
            // TODO add your handling code here:
            
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;","systemengine-server","63Z6OOi*");
                Statement stat = con.createStatement();
                
                String sql_celdas = "SELECT Id_celda, Numero_celda, Disposicion_celda FROM [dbo].[Celdas] WHERE Id_parqueadero="+idParqueadero+" AND Disposicion_celda='Disponible';";
                ResultSet rs_celdas = stat.executeQuery(sql_celdas);

                System.out.println(sql_celdas);

                while ( rs_celdas.next() ) {
                    int id_celda = rs_celdas.getInt("Id_celda");
                    String numero_celda = rs_celdas.getString("Numero_celda");
                    
                    System.out.println( numero_celda );
                    
                    cbCeldas.addItem(numero_celda);

                    ids.add(id_celda);
                }
                
                stat.close();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelEditarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelEditarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            txtPlaca.setText("");
        }
    }

    public void setIdParqueadero( int id ) {
        idParqueadero = id;
        System.out.println(idParqueadero);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btRegistrar;
    private javax.swing.JComboBox<String> cbCeldas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}
