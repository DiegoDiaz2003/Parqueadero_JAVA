/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoparqueadero;

import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.border.Border;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Cesar Augusto Perez Tafur
 */
public class Op_PanelListarVehiculos extends javax.swing.JPanel {

    /**
     * Creates new form PanelListarVehiculos
     */
    public Op_PanelListarVehiculos() {
        initComponents();
        rbVehiculoFueraParq.setSelected(true);
        TableColumnModel columnModel = tblVehiculos.getColumnModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPlaca = new javax.swing.JTextField();
        txtCelda = new javax.swing.JTextField();
        dcFecha = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVehiculos = new javax.swing.JTable();
        rbVehiculoEnParq = new javax.swing.JRadioButton();
        rbVehiculoFueraParq = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        btBuscar = new java.awt.Button();
        btGenerarReporte = new java.awt.Button();

        setBackground(new java.awt.Color(246, 246, 246));
        setForeground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("SansSerif", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(18, 24, 80));
        jLabel1.setText("Modulo de Consulta de Veh√≠culos del Parqueadero");

        txtPlaca.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txtCelda.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        dcFecha.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(41, 116, 155));
        jLabel2.setText("Placa");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(41, 116, 155));
        jLabel3.setText("Celda");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(41, 116, 155));
        jLabel4.setText("Fecha");

        tblVehiculos.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        tblVehiculos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Placa", "Celda", "Hora Entrada", "Hora Salida", "Estado", "Pago"
            }
        ));
        jScrollPane1.setViewportView(tblVehiculos);
        tblVehiculos.getAccessibleContext().setAccessibleDescription("");

        rbVehiculoEnParq.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        rbVehiculoEnParq.setForeground(new java.awt.Color(63, 63, 63));
        rbVehiculoEnParq.setText("En parqueadero");

        rbVehiculoFueraParq.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        rbVehiculoFueraParq.setForeground(new java.awt.Color(63, 63, 63));
        rbVehiculoFueraParq.setText("Fuera de parqueadero");
        rbVehiculoFueraParq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVehiculoFueraParqActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(41, 116, 155));
        jLabel6.setText("Ubicacion del vehiculo");

        btBuscar.setBackground(new java.awt.Color(51, 102, 255));
        btBuscar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btBuscar.setLabel("Buscar");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        btGenerarReporte.setActionCommand("Reporte");
        btGenerarReporte.setBackground(new java.awt.Color(255, 255, 51));
        btGenerarReporte.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btGenerarReporte.setForeground(new java.awt.Color(0, 0, 0));
        btGenerarReporte.setLabel("Reporte");
        btGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGenerarReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(btGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtCelda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(dcFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel4)))))
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbVehiculoEnParq)
                                .addGap(9, 9, 9)
                                .addComponent(rbVehiculoFueraParq))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jLabel6))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPlaca)
                    .addComponent(txtCelda)
                    .addComponent(dcFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(rbVehiculoEnParq)
                    .addComponent(rbVehiculoFueraParq))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    String consulta;
    int idParqueadero;
    String tipoVehiculo = "otro", estado = "", Fecha = "", Fecha2 = "";
    private void rbVehiculoFueraParqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVehiculoFueraParqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbVehiculoFueraParqActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        try {

            DefaultTableModel modelo = (DefaultTableModel) tblVehiculos.getModel();
            modelo.setRowCount(0);
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "systemengine-server", "63Z6OOi*");
            Statement stat = con.createStatement();

            if (dcFecha.getDate() != null) {
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date date = dcFecha.getDate();
                Fecha = dateFormat.format(date);

                Calendar calendar = Calendar.getInstance();
                calendar.setTime(date);
                calendar.add(Calendar.DAY_OF_YEAR, 1);

                Date date2 = calendar.getTime();
                Fecha2 = dateFormat.format(date2);
            }

            String busqueda_disponibilidad = "";

            if (rbVehiculoEnParq.isSelected()) {
                busqueda_disponibilidad = "AND Hora_salida IS NULL";

                if (rbVehiculoFueraParq.isSelected()) {
                    busqueda_disponibilidad = "";
                }

            } else if (rbVehiculoFueraParq.isSelected()) {
                busqueda_disponibilidad = "AND Hora_salida IS NOT NULL";
            }

            String consulta1 = "SELECT "
                    + "P.Nombre_parqueadero as 'Parqueadero', "
                    + "C.Id_celda as 'Id_celda' "
                    + "FROM [dbo].[Parqueadero] P "
                    + "JOIN [dbo].[Celdas] C "
                    + "ON P.Id_parqueadero = C.Id_parqueadero WHERE P.Id_parqueadero =" + idParqueadero + ";";

            ResultSet rs = stat.executeQuery(consulta1);
            System.out.println(consulta1);

            if (rs.next()) {

                do {
                    String consulta = "SELECT "
                            + "V.Placa as 'Placa', "
                            + "C.Numero_celda as 'Celda', "
                            + "V.Hora_entrada as 'Hora_entrada', "
                            + "V.Hora_salida as 'Hora_salida', "
                            + "C.Id_celda as 'Id_celda' ,"
                            + "V.Valor_total as 'Valor_total', "
                            + "V.Id_vehiculo as 'Id_vehiculo' "
                            + "FROM [dbo].[Vehiculo] V "
                            + "JOIN [dbo].[Celdas] C "
                            + "ON C.Id_celda = V.Id_celda WHERE C.Id_celda=" + rs.getInt("Id_celda") + " AND Placa LIKE '%" + txtPlaca.getText() + "%' AND C.Numero_celda LIKE '%" + txtCelda.getText() + "%'" + " AND Hora_entrada BETWEEN '" + Fecha + "' AND '" + Fecha2 + "' " + busqueda_disponibilidad + ";";

                    Statement stat_1 = con.createStatement();
                    System.out.println(consulta);
                    ResultSet rs1 = stat_1.executeQuery(consulta);

                    // nombre,apellido,cedula,perfil,correo
                    while (rs1.next()) {

                        String disposicion = "";
                        String horasalida = rs1.getString("Hora_salida");
                        String pago = rs1.getString("Valor_total");
                        if (horasalida == null) {
                            horasalida = "No ha salido";
                            pago = "0";
                            disposicion = "En el parqueadero";
                        } else {
                            disposicion = "Fuera del parqueadero";
                            horasalida = rs1.getString("Hora_salida").substring(10).substring(0, 6);
                            pago = rs1.getString("Valor_total");
                        }

                        String[] fila = {rs1.getString("Id_vehiculo"), rs1.getString("Placa"), rs1.getString("Celda"), rs1.getString("Hora_entrada").substring(10).substring(0, 6), horasalida, disposicion, "$" + pago};
                        modelo.addRow(fila);

                    }

                } while (rs.next());

            }

            if (modelo.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "B√∫squeda vacia", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
        }//GEN-LAST:event_btBuscarActionPerformed

        private void btGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGenerarReporteActionPerformed
            try {

                String dest = new File (".").getAbsolutePath ()+"/sample.pdf"; 
        try {
            
            PdfWriter writer = new PdfWriter(dest);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc, PageSize.A5);
            pdfDoc.addNewPage(); 

            Paragraph para = new Paragraph ("Reporte del Parqueadero"); 

            para.setBorder(Border.NO_BORDER);
            para.setBold();

            Paragraph para1 = new Paragraph ("Hora del reporte: "+ Fecha); 
            Paragraph para2 = new Paragraph ("Celda: "+txtCelda.getText()); 
            Paragraph para3 = new Paragraph ("Placa: "+txtPlaca.getText()); 

            document.add(para); 
            document.add(para1);
            document.add(para2); 
            document.add(para3);
            
            float[] columns = {50F,150F,150F,150F,150F,150F,150F};
            Table table = new Table(columns);    
            
            table.addCell("Id");
            table.addCell("Placa");
            table.addCell("Celda");
            table.addCell("Hora entrada");
            table.addCell("Hora salida");
            table.addCell("Estado");
            table.addCell("Pago");

                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "systemengine-server", "63Z6OOi*");
                Statement stat = con.createStatement();

                if (dcFecha.getDate() != null) {
                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = dcFecha.getDate();
                    Fecha = dateFormat.format(date);

                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(date);
                    calendar.add(Calendar.DAY_OF_YEAR, 1);

                    Date date2 = calendar.getTime();
                    Fecha2 = dateFormat.format(date2);
                }

                String busqueda_disponibilidad = "";

                if (rbVehiculoEnParq.isSelected()) {
                    busqueda_disponibilidad = "AND Hora_salida IS NULL";

                    if (rbVehiculoFueraParq.isSelected()) {
                        busqueda_disponibilidad = "";
                    }

                } else if (rbVehiculoFueraParq.isSelected()) {
                    busqueda_disponibilidad = "AND Hora_salida IS NOT NULL";
                }

                String consulta1 = "SELECT "
                        + "P.Nombre_parqueadero as 'Parqueadero', "
                        + "C.Id_celda as 'Id_celda' "
                        + "FROM [dbo].[Parqueadero] P "
                        + "JOIN [dbo].[Celdas] C "
                        + "ON P.Id_parqueadero = C.Id_parqueadero WHERE P.Id_parqueadero =" + idParqueadero + ";";

                ResultSet rs = stat.executeQuery(consulta1);
                System.out.println(consulta1);

                if (rs.next()) {

                    do {
                        String consulta = "SELECT "
                                + "V.Placa as 'Placa', "
                                + "C.Numero_celda as 'Celda', "
                                + "V.Hora_entrada as 'Hora_entrada', "
                                + "V.Hora_salida as 'Hora_salida', "
                                + "C.Id_celda as 'Id_celda' ,"
                                + "V.Valor_total as 'Valor_total', "
                                + "V.Id_vehiculo as 'Id_vehiculo' "
                                + "FROM [dbo].[Vehiculo] V "
                                + "JOIN [dbo].[Celdas] C "
                                + "ON C.Id_celda = V.Id_celda WHERE C.Id_celda=" + rs.getInt("Id_celda") + " AND Placa LIKE '%" + txtPlaca.getText() + "%' AND C.Numero_celda LIKE '%" + txtCelda.getText() + "%'" + " AND Hora_entrada BETWEEN '" + Fecha + "' AND '" + Fecha2 + "' " + busqueda_disponibilidad + ";";

                        Statement stat_1 = con.createStatement();
                        System.out.println(consulta);
                        ResultSet rs1 = stat_1.executeQuery(consulta);

                        // nombre,apellido,cedula,perfil,correo
                        while (rs1.next()) {

                        String disposicion = "";
                        String horasalida = rs1.getString("Hora_salida");
                        String pago = rs1.getString("Valor_total");
                        if (horasalida == null) {
                            horasalida = "No ha salido";
                            pago = "0";
                            disposicion = "En el parqueadero";
                        } else {
                            disposicion = "Fuera del parqueadero";
                            horasalida = rs1.getString("Hora_salida").substring(10).substring(0,6);
                            pago = rs1.getString("Valor_total");
                        }
                                                
                        table.addCell(rs1.getString("Id_vehiculo"));
                        table.addCell(rs1.getString("Placa"));
                        table.addCell(rs1.getString("Celda"));
                        table.addCell(rs1.getString("Hora_entrada").substring(10).substring(0, 6));
                        table.addCell(horasalida);
                        table.addCell(disposicion);
                        table.addCell("$" + pago);
                        

                    } 

                    } while (rs.next());

            }
            
            if ( table.getNumberOfRows() == 1 ) {
                JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "B√∫squeda vacia", JOptionPane.INFORMATION_MESSAGE);
            }
            
            document.add(table);
            document.close();
            System.out.println("PDF Created");  
            
        try {

            if ((new File(new File (".").getAbsolutePath ()+"/sample.pdf")).exists()) {

                    Process p = Runtime
                       .getRuntime()
                       .exec("rundll32 url.dll,FileProtocolHandler "+ new File (".").getAbsolutePath ()+"/sample.pdf");
                    p.waitFor();

            } else {

                    System.out.println("File is not exists");

            }

            System.out.println("Done");

        } catch (Exception ex) {
              ex.printStackTrace();
        }

        } catch (FileNotFoundException ex) {
        Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PanelRegistrarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//GEN-LAST:event_btGenerarReporteActionPerformed

    public void setIdParqueadero(int id) {
        idParqueadero = id;
    }

    @Override
    public void setVisible(boolean value) {
        super.setVisible(value);
        if (value) {
            try {

                DefaultTableModel modelo = (DefaultTableModel) tblVehiculos.getModel();
                modelo.setRowCount(0);
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "systemengine-server", "63Z6OOi*");
                Statement stat = con.createStatement();

                String consulta1 = "SELECT "
                        + "P.Nombre_parqueadero as 'Parqueadero', "
                        + "C.Id_celda as 'Id_celda' "
                        + "FROM [dbo].[Parqueadero] P "
                        + "JOIN [dbo].[Celdas] C "
                        + "ON P.Id_parqueadero = C.Id_parqueadero;";

                ResultSet rs = stat.executeQuery(consulta1);
                System.out.println(consulta1);

                if (rs.next()) {

                    do {
                        String consulta = "SELECT "
                                + "V.Placa as 'Placa', "
                                + "C.Numero_celda as 'Celda', "
                                + "V.Hora_entrada as 'Hora_entrada', "
                                + "V.Hora_salida as 'Hora_salida', "
                                + "C.Id_celda as 'Id_celda' ,"
                                + "V.Valor_total as 'Valor_total', "
                                + "V.Id_vehiculo as 'Id_vehiculo' "
                                + "FROM [dbo].[Vehiculo] V "
                                + "JOIN [dbo].[Celdas] C "
                                + "ON C.Id_celda = V.Id_celda;";

                        Statement stat_1 = con.createStatement();
                        System.out.println(consulta);
                        ResultSet rs1 = stat_1.executeQuery(consulta);

                        // nombre,apellido,cedula,perfil,correo
                        while (rs1.next()) {

                            String disposicion = "";
                            String horasalida = rs1.getString("Hora_salida");
                            String pago = rs1.getString("Valor_total");
                            if (horasalida == null) {
                                horasalida = "No ha salido";
                                pago = "0";
                                disposicion = "En el parqueadero";
                            } else {
                                disposicion = "Fuera del parqueadero";
                                horasalida = rs1.getString("Hora_salida").substring(10).substring(0, 6);
                                pago = rs1.getString("Valor_total");
                            }

                            String[] fila = {rs1.getString("Id_vehiculo"), rs1.getString("Placa"), rs1.getString("Celda"), rs1.getString("Hora_entrada").substring(10).substring(0, 6), horasalida, disposicion, "$" + pago};
                            modelo.addRow(fila);

                        }

                    } while (rs.next());

                }

                if (modelo.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "No existen resultados para la busqueda", "B√∫squeda vacia", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelListarUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                // TODO add your handling code here:

                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection con = DriverManager.getConnection("jdbc:sqlserver://systemengine-database.database.windows.net:1433;database=SystemEngine-database;user=systemengine-server@systemengine-database;password={63Z6OOi*};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;", "systemengine-server", "63Z6OOi*");
                Statement stat = con.createStatement();

                String sql_parqueaderos = "SELECT Id_parqueadero, Nombre_parqueadero FROM [dbo].[Parqueadero];";
                ResultSet rs_parqueaderos = stat.executeQuery(sql_parqueaderos);

                System.out.println(sql_parqueaderos);

                while (rs_parqueaderos.next()) {
                    int id_parqueadero = rs_parqueaderos.getInt("Id_parqueadero");
                    String nombre_parqueadero = rs_parqueaderos.getString("Nombre_parqueadero");
                }

                stat.close();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelEditarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelEditarParqueaderos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            txtPlaca.setText("");
            txtCelda.setText("");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btBuscar;
    private java.awt.Button btGenerarReporte;
    private com.toedter.calendar.JDateChooser dcFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbVehiculoEnParq;
    private javax.swing.JRadioButton rbVehiculoFueraParq;
    private javax.swing.JTable tblVehiculos;
    private javax.swing.JTextField txtCelda;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables
}
